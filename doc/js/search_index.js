var search_data = {"index":{"searchIndex":["polarssl","cipher","badinputdata","error","unsupportedcipher","ctrdrbg","entropy","mallocfailed","netwantread","netwantwrite","ssl","error","close()","close_notify()","finish()","gather()","handshake()","new()","new()","new()","read()","reset()","self_test()","set_authmode()","set_endpoint()","set_iv()","set_rng()","set_socket()","setkey()","update()","write()","rdoc_main"],"longSearchIndex":["polarssl","polarssl::cipher","polarssl::cipher::badinputdata","polarssl::cipher::error","polarssl::cipher::unsupportedcipher","polarssl::ctrdrbg","polarssl::entropy","polarssl::mallocfailed","polarssl::netwantread","polarssl::netwantwrite","polarssl::ssl","polarssl::ssl::error","polarssl::ssl#close()","polarssl::ssl#close_notify()","polarssl::cipher#finish()","polarssl::entropy#gather()","polarssl::ssl#handshake()","polarssl::cipher::new()","polarssl::ctrdrbg::new()","polarssl::entropy::new()","polarssl::ssl#read()","polarssl::cipher#reset()","polarssl::ctrdrbg::self_test()","polarssl::ssl#set_authmode()","polarssl::ssl#set_endpoint()","polarssl::cipher#set_iv()","polarssl::ssl#set_rng()","polarssl::ssl#set_socket()","polarssl::cipher#setkey()","polarssl::cipher#update()","polarssl::ssl#write()",""],"info":[["PolarSSL","","classes/PolarSSL.html","","<p>The PolarSSL module\n"],["PolarSSL::Cipher","","classes/PolarSSL/Cipher.html","","<p>This class lets you encrypt and decrypt data.\n<p>Example\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;polarssl&#39;</span>\n<span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;base64&#39;</span>\n\n<span class=\"ruby-identifier\">my_iv</span> = <span class=\"ruby-constant\">SecureRandom</span>.<span class=\"ruby-identifier\">random_bytes</span>(<span class=\"ruby-value\">16</span>) <span class=\"ruby-operator\">...</span>\n</pre>\n"],["PolarSSL::Cipher::BadInputData","","classes/PolarSSL/Cipher/BadInputData.html","","<p>Raised when the input data for the cipher was incorrect. If you get this\nexception, please file a bug …\n"],["PolarSSL::Cipher::Error","","classes/PolarSSL/Cipher/Error.html","","<p>Raised when the PolarSSL library throws a certain Cipher error code\n"],["PolarSSL::Cipher::UnsupportedCipher","","classes/PolarSSL/Cipher/UnsupportedCipher.html","","<p>Raised when you do not pass a supported cipher type to\nPolarSSL::Cipher.new()\n"],["PolarSSL::CtrDrbg","","classes/PolarSSL/CtrDrbg.html","",""],["PolarSSL::Entropy","","classes/PolarSSL/Entropy.html","",""],["PolarSSL::MallocFailed","","classes/PolarSSL/MallocFailed.html","","<p>Raised when not enough memory can be allocated for initializing the ssl\ncontext with ssl_init();\n"],["PolarSSL::NetWantRead","","classes/PolarSSL/NetWantRead.html","","<p>Raised when the ssl connection expects a read.\n"],["PolarSSL::NetWantWrite","","classes/PolarSSL/NetWantWrite.html","","<p>Raised when the ssl connection expects a write.\n"],["PolarSSL::SSL","","classes/PolarSSL/SSL.html","","<p>This class is the base for doing SSL communication over a socket.\n<p>Sample\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;polarssl&#39;</span>\n\n<span class=\"ruby-identifier\">socket</span> = <span class=\"ruby-constant\">TCPSocket</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;polarssl.org&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["PolarSSL::SSL::Error","","classes/PolarSSL/SSL/Error.html","","<p>Raised when an SSL error occurs.\n"],["close","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-close","()","<p>Final method to be called when done using the SSL connection. This\nimmediately frees any SSL data in …\n"],["close_notify","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-close_notify","()","<p>Notifies the peer to close the connection. true or raises\nPolarSSL::SSL::Error\n"],["finish","PolarSSL::Cipher","classes/PolarSSL/Cipher.html#method-i-finish","()","<p>Finishes encrypting the data added by one or multiple update() calls and\nreturns the encrypted data. …\n"],["gather","PolarSSL::Entropy","classes/PolarSSL/Entropy.html#method-i-gather","()",""],["handshake","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-handshake","()","<p>Initiates SSL handshake. When something goes wrong, raises one of:\n<p>PolarSSL::NetWantRead,\n<p>PolarSSL::NetWantWrite …\n"],["new","PolarSSL::Cipher","classes/PolarSSL/Cipher.html#method-c-new","(p1)","<p>Initializes a new Cipher object to encrypt data with.\n\n<pre>cipher = PolarSSL::Cipher.new(&#39;AES-128-CTR&#39;)</pre>\n<p>For …\n"],["new","PolarSSL::CtrDrbg","classes/PolarSSL/CtrDrbg.html#method-c-new","(p1)",""],["new","PolarSSL::Entropy","classes/PolarSSL/Entropy.html#method-c-new","()",""],["read","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-read","(p1)","<p>Reads <code>length</code> bytes from the SSL connection or raises\nPolarSSL::SSL::Error.\n"],["reset","PolarSSL::Cipher","classes/PolarSSL/Cipher.html#method-i-reset","()","<p>Reset the cipher context and buffers.\n<p>cipher.reset()\n"],["self_test","PolarSSL::CtrDrbg","classes/PolarSSL/CtrDrbg.html#method-c-self_test","()",""],["set_authmode","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_authmode","(p1)","<p>Sets the certificate verification mode for the SSL connection. Possible\nvalues are:\n<p>PolarSSL::SSL::SSL_VERIFY_NONE …\n"],["set_endpoint","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_endpoint","(p1)","<p>Sets the endpoint mode for the current SSL connection to act as a server or\na client. Possible values …\n"],["set_iv","PolarSSL::Cipher","classes/PolarSSL/Cipher.html#method-i-set_iv","(p1, p2)","<p>Sets the initialization vector for the cipher. An initialization vector is\nused to “randomize” …\n"],["set_rng","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_rng","(p1)","<p>Sets the random number generator to be used for this connection. You need\nto use an instance of PolarSSL::CtrDrbg …\n"],["set_socket","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_socket","(p1)","<p>Set the TCPSocket to be used for this SSL connection. Example:\n\n<pre>socket = TCPSocket.new(&#39;polarssl.org&#39;, ...</pre>\n"],["setkey","PolarSSL::Cipher","classes/PolarSSL/Cipher.html#method-i-setkey","(p1, p2, p3)","<p>Sets the key to be used for encrypting/decrypting this cipher. The key,\nkey_length and operation depend …\n"],["update","PolarSSL::Cipher","classes/PolarSSL/Cipher.html#method-i-update","(p1)","<p>Adds input to your cipher.\n<p>cipher.update(“Some message I want to encrypt”)\n"],["write","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-write","(p1)","<p>Writes to the SSL connection or raises PolarSSL::SSL::Error.\n"],["RDOC_MAIN","","files/RDOC_MAIN_rdoc.html","","<p>Using PolarSSL\n<p>Setting up an SSL Connection\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;polarssl&#39;</span>\n\n<span class=\"ruby-identifier\">socket</span> = <span class=\"ruby-constant\">TCPSocket</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;polarssl.org&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}