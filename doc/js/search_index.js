var search_data = {"index":{"searchIndex":["polarssl","mallocfailed","netwantread","netwantwrite","ssl","error","close()","close_notify()","handshake()","read()","set_authmode()","set_endpoint()","set_rng()","set_socket()","write()","rdoc_main"],"longSearchIndex":["polarssl","polarssl::mallocfailed","polarssl::netwantread","polarssl::netwantwrite","polarssl::ssl","polarssl::ssl::error","polarssl::ssl#close()","polarssl::ssl#close_notify()","polarssl::ssl#handshake()","polarssl::ssl#read()","polarssl::ssl#set_authmode()","polarssl::ssl#set_endpoint()","polarssl::ssl#set_rng()","polarssl::ssl#set_socket()","polarssl::ssl#write()",""],"info":[["PolarSSL","","classes/PolarSSL.html","",""],["PolarSSL::MallocFailed","","classes/PolarSSL/MallocFailed.html","","<p>Raised when not enough memory can be allocated for initializing the ssl\ncontext with ssl_init();\n"],["PolarSSL::NetWantRead","","classes/PolarSSL/NetWantRead.html","","<p>Raised when the ssl connection expects a read.\n"],["PolarSSL::NetWantWrite","","classes/PolarSSL/NetWantWrite.html","","<p>Raised when the ssl connection expects a write.\n"],["PolarSSL::SSL","","classes/PolarSSL/SSL.html","","<p>This class is the base for doing SSL communication over a socket.\n<p>Sample\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;polarssl&#39;</span>\n\n<span class=\"ruby-identifier\">socket</span> = <span class=\"ruby-constant\">TCPSocket</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;polarssl.org&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"],["PolarSSL::SSL::Error","","classes/PolarSSL/SSL/Error.html","","<p>Raised when an SSL error occurs.\n"],["close","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-close","()","<p>Final method to be called when done using the SSL connection. This\nimmediately frees any SSL data in …\n"],["close_notify","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-close_notify","()","<p>Notifies the peer to close the connection. true or raises\nPolarSSL::SSL::Error\n"],["handshake","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-handshake","()","<p>Initiates SSL handshake. When something goes wrong, raises one of:\n<p>PolarSSL::NetWantRead,\n<p>PolarSSL::NetWantWrite …\n"],["read","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-read","(p1)","<p>Reads <code>length</code> bytes from the SSL connection or raises\nPolarSSL::SSL::Error.\n"],["set_authmode","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_authmode","(p1)","<p>Sets the certificate verification mode for the SSL connection. Possible\nvalues are:\n<p>PolarSSL::SSL::SSL_VERIFY_NONE …\n"],["set_endpoint","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_endpoint","(p1)","<p>Sets the endpoint mode for the current SSL connection to act as a server or\na client. Possible values …\n"],["set_rng","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_rng","(p1)","<p>Sets the random number generator to be used for this connection. You need\nto use an instance of PolarSSL::CtrDrbg …\n"],["set_socket","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-set_socket","(p1)","<p>Set the TCPSocket to be used for this SSL connection. Example:\n\n<pre>socket = TCPSocket.new(&#39;polarssl.org&#39;, ...</pre>\n"],["write","PolarSSL::SSL","classes/PolarSSL/SSL.html#method-i-write","(p1)","<p>Writes to the SSL connection or raises PolarSSL::SSL::Error.\n"],["RDOC_MAIN","","files/RDOC_MAIN_rdoc.html","","<p>Using PolarSSL\n<p>Setting up an SSL Connection\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">require</span> <span class=\"ruby-string\">&#39;polarssl&#39;</span>\n\n<span class=\"ruby-identifier\">socket</span> = <span class=\"ruby-constant\">TCPSocket</span>.<span class=\"ruby-identifier\">new</span>(<span class=\"ruby-string\">&#39;polarssl.org&#39;</span>, <span class=\"ruby-operator\">...</span>\n</pre>\n"]]}}